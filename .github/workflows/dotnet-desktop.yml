# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Data Masker

on: 
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        targetPlatform: [x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: DataMasker.Main.csproj                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: DataMasker.UnitTest                # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: DataMasker.Package    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: DataMasker.Main.csproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      DataMasker_Base: DataMasker.sln
      DataMasker_UnitTest: DataMasker.UnitTest.csproj  
      App_Packages_Archive: DataMaskerInstaller.zip
        
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Install Nuget
      uses: nuget/setup-nuget@v1
      with:
        nuget-api-key: ${{ secrets.NuGetAPIKey }}
        nuget-version: '5.x'
        
    - name: Install and Setup VSTest Path
      uses: darenm/Setup-VSTest@v1

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    #Nuget Restore
    - name: NuGet Restore DataMasker.Main
      run: nuget restore $env:Solution_Name -PackagesDirectory Packages
      working-directory: .\DataMasker.Main
      
    - name: NuGet Restore DataMasker Base
      run: nuget restore $env:DataMasker_Base -PackagesDirectory Packages
      
    - name: NuGet Restore DataMasker UnitTest
      run: nuget restore $env:DataMasker_UnitTest -PackagesDirectory Packages
      working-directory: .\DataMasker.UnitTest

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Rebuild /p:Configuration=$env:Configuration /p:Platform=x64
      working-directory: .\DataMasker.Main
      env:
        Configuration: ${{ matrix.configuration }}
        
    # Build Unit Test Proj 
    - name: Rebuild DataMasker UnitTest Proj
      run: msbuild $env:DataMasker_UnitTest /t:Restore /t:Rebuild /p:Configuration=$env:Configuration /p:Platform=x64
      working-directory: .\DataMasker.UnitTest
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}
        
    # Decode the base 64 encoded pfx and save the Signing_Certificate
   # - name: Decode the pfx
   #   run: |
    #    $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #    $currentDirectory = Get-Location
     #   $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:Wap_Project_Directory -AdditionalChildPath $env:SigningCertificate
     #   [IO.File]::SetAttributes("$certificatePath", FileAttributes.Normal)
      #  [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:Platform=x64 /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /t:Publish /p:PublishSingleFile=True /p:SelfContained=True /p:PublishProtocol=FileSystem /p:Configuration=Release /p:Platform=x64 /p:PublishDir=bin\Release\publish\win-x64 /p:RuntimeIdentifier=win-x64 /p:PublishReadyToRun=False /p:PublishTrimmed=False
      working-directory: .\DataMasker.Main
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}
      
     # Archive the package for release
    - name: Create archive
      run: |
        Add-Type -Assembly "System.IO.Compression.FileSystem"
        [System.IO.Compression.ZipFile]::CreateFromDirectory((Resolve-Path .\).Path + "\DataMasker.Main\bin\Release\publish\", (Resolve-Path .\).Path + "\DataMasker.Main\$env:App_Packages_Archive")       
    
    - name: Run Unit Test
      run: vstest.console.exe bin\x64\Release\DataMasker.UnitTest.dll /Platform:x64
      working-directory: .\DataMasker.UnitTest
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}
    # Remove the pfx
    #- name: Remove the pfx
     # run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: DataMasker MSIX Package
        path: DataMasker.Main\bin\Release\publish
        
    # Create the release:  https://github.com/actions/create-release
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: DataMasker.Main.${{ github.run_number}}.${{ matrix.targetplatform }}
        release_name: DataMasker.Main${{ github.run_number }}.${{ matrix.targetplatform }}
        draft: false
        prerelease: false
    
        # Upload release asset:   https://github.com/actions/upload-release-asset
    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: .\DataMasker.Main\${{ env.App_Packages_Archive }}
        asset_name: ${{ env.App_Packages_Archive }}
        asset_content_type: application/zip
